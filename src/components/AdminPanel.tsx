import { useState, useEffect } from "react";
import Icon from "@/components/ui/icon";
import LoginForm from "@/components/admin/LoginForm";
import PasswordResetForm from "@/components/admin/PasswordResetForm";
import AdminMenu from "@/components/admin/AdminMenu";
import ContactsEditForm from "@/components/admin/ContactsEditForm";
import CertificatesEditForm from "@/components/admin/CertificatesEditForm";
import TestimonialAddForm from "@/components/admin/TestimonialAddForm";
import TestimonialList from "@/components/admin/TestimonialList";
import { siteData } from "@/data";

interface Testimonial {
  id?: number;
  company: string;
  letterUrl: string;
}

interface Contacts {
  phone: string;
  email: string;
  address: string;
}

interface Certificates {
  skolkovo: string;
  compliance: string;
}

interface AdminPanelProps {
  testimonials: Testimonial[];
  onUpdate: (testimonials: Testimonial[]) => void;
  contacts: Contacts;
  onUpdateContacts: (contacts: Contacts) => void;
  certificates: Certificates;
  onUpdateCertificates: (certificates: Certificates) => void;
}

const AdminPanel = ({ testimonials, onUpdate, contacts, onUpdateContacts, certificates, onUpdateCertificates }: AdminPanelProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [password, setPassword] = useState("");
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [newTestimonial, setNewTestimonial] = useState({ company: "", letterUrl: "" });
  const [loginError, setLoginError] = useState("");
  const [showContactsEdit, setShowContactsEdit] = useState(false);
  const [editedContacts, setEditedContacts] = useState(contacts);
  const [showCertificatesEdit, setShowCertificatesEdit] = useState(false);
  const [editedCertificates, setEditedCertificates] = useState(certificates);
  const [showPasswordReset, setShowPasswordReset] = useState(false);
  const [masterKey, setMasterKey] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [passwordResetError, setPasswordResetError] = useState("");
  const [loginAttempts, setLoginAttempts] = useState(0);
  const [isBlocked, setIsBlocked] = useState(false);
  const [blockTime, setBlockTime] = useState(0);

  // üîí –ó–ê–ì–†–£–ó–ö–ê –°–û–•–†–ê–ù–Å–ù–ù–´–• –î–ê–ù–ù–´–• –ü–†–ò –ó–ê–ü–£–°–ö–ï
  useEffect(() => {
    const handleOpenAdmin = () => {
      setIsOpen(true);
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    const blockedUntil = localStorage.getItem('adminBlockedUntil');
    if (blockedUntil && Date.now() < parseInt(blockedUntil)) {
      setIsBlocked(true);
      setBlockTime(parseInt(blockedUntil) - Date.now());
    }

    window.addEventListener('openAdminPanel', handleOpenAdmin);
    return () => window.removeEventListener('openAdminPanel', handleOpenAdmin);
  }, []);

  // üîí –¢–ê–ô–ú–ï–† –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò
  useEffect(() => {
    if (!isBlocked) return;

    const timer = setInterval(() => {
      const timeLeft = blockTime - 1000;
      setBlockTime(timeLeft);

      if (timeLeft <= 0) {
        setIsBlocked(false);
        localStorage.removeItem('adminBlockedUntil');
        localStorage.removeItem('loginAttempts');
        setLoginAttempts(0);
        clearInterval(timer);
      }
    }, 1000);

    return () => clearInterval(timer);
  }, [isBlocked, blockTime]);

  // üîí –ü–†–û–í–ï–†–ö–ê –ü–ê–†–û–õ–Ø –° –ó–ê–©–ò–¢–û–ô
  const handleLogin = () => {
    if (isBlocked) {
      setLoginError(`–°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ ${Math.ceil(blockTime / 1000 / 60)} –º–∏–Ω—É—Ç`);
      return;
    }

    setLoginError("");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ LocalStorage –∏–ª–∏ –∏–∑ data.ts
    const currentPassword = localStorage.getItem('adminPassword') || siteData.adminPassword;
    
    if (password === currentPassword) {
      setIsAuthenticated(true);
      setPassword("");
      setLoginAttempts(0);
      localStorage.removeItem('loginAttempts');
    } else {
      const attempts = loginAttempts + 1;
      setLoginAttempts(attempts);
      localStorage.setItem('loginAttempts', attempts.toString());

      if (attempts >= 5) {
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç
        const blockUntil = Date.now() + 30 * 60 * 1000;
        setIsBlocked(true);
        setBlockTime(30 * 60 * 1000);
        localStorage.setItem('adminBlockedUntil', blockUntil.toString());
        setLoginError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç.");
      } else {
        setLoginError(`–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${5 - attempts}`);
      }
    }
  };

  // üîí –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø
  const handlePasswordReset = () => {
    setPasswordResetError("");

    if (newPassword.length < 6) {
      setPasswordResetError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤");
      return;
    }

    if (newPassword !== confirmPassword) {
      setPasswordResetError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }

    // –í–ê–® –ú–ê–°–¢–ï–†-–ö–õ–Æ–ß
    if (masterKey === "K7#m@nPq$vR2!xL") {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ LocalStorage
      localStorage.setItem('adminPassword', newPassword);
      siteData.adminPassword = newPassword;
      alert("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω");
      setShowPasswordReset(false);
      setMasterKey("");
      setNewPassword("");
      setConfirmPassword("");
      setPasswordResetError("");
    } else {
      setPasswordResetError("–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á");
    }
  };

  // –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê –í –ü–ê–ú–Ø–¢–ò
  const handlePublishTestimonial = () => {
    if (!newTestimonial.company.trim()) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏");
      return;
    }

    const newTestimonialWithId: Testimonial = {
      id: testimonials.length + 1,
      company: newTestimonial.company,
      letterUrl: newTestimonial.letterUrl
    };

    const updatedTestimonials = [...testimonials, newTestimonialWithId];
    onUpdate(updatedTestimonials);
    
    setNewTestimonial({ company: "", letterUrl: "" });
    setShowAddForm(false);
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setShowAddForm(false);
    setShowContactsEdit(false);
    setShowCertificatesEdit(false);
    setIsOpen(false);
  };

  // –£–î–ê–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê –ò–ó –ü–ê–ú–Ø–¢–ò
  const handleDeleteTestimonial = (id: number) => {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?")) return;

    const updatedTestimonials = testimonials.filter(t => t.id !== id);
    onUpdate(updatedTestimonials);
  };

  // –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê –í –ü–ê–ú–Ø–¢–ò
  const handleUpdateTestimonial = (testimonial: Testimonial) => {
    const updatedTestimonials = testimonials.map(t => 
      t.id === testimonial.id ? testimonial : t
    );
    onUpdate(updatedTestimonials);
    setEditingIndex(null);
  };

  const handleFieldChange = (index: number, field: string, value: string) => {
    const updated = [...testimonials];
    updated[index] = { ...updated[index], [field]: value };
    onUpdate(updated);
  };

  // –ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –û–¢–ó–´–í–û–í
  const handleMoveUp = (index: number) => {
    if (index === 0) return;
    
    const updated = [...testimonials];
    [updated[index - 1], updated[index]] = [updated[index], updated[index - 1]];
    onUpdate(updated);
  };

  const handleMoveDown = (index: number) => {
    if (index === testimonials.length - 1) return;
    
    const updated = [...testimonials];
    [updated[index], updated[index + 1]] = [updated[index + 1], updated[index]];
    onUpdate(updated);
  };

  // –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–û–í –í –ü–ê–ú–Ø–¢–ò
  const handleSaveContacts = () => {
    onUpdateContacts(editedContacts);
    setShowContactsEdit(false);
    alert("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
  };

  // –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í –í –ü–ê–ú–Ø–¢–ò
  const handleSaveCertificates = () => {
    onUpdateCertificates(editedCertificates);
    setShowCertificatesEdit(false);
    alert("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
  };

  if (!isOpen) {
    return null;
  }

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6 rounded-lg shadow-2xl">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-bold text-slate-900">–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
          <button
            onClick={handleLogout}
            className="text-slate-500 hover:text-slate-700"
          >
            <Icon name="X" size={24} />
          </button>
        </div>

        {!isAuthenticated ? (
          showPasswordReset ? (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-slate-900">–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h3>
              
              <div className="space-y-3">
                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á
                  </label>
                  <input
                    type="password"
                    value={masterKey}
                    onChange={(e) => setMasterKey(e.target.value)}
                    className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                  </label>
                  <input
                    type="password"
                    value={newPassword}
                    onChange={(e) => setNewPassword(e.target.value)}
                    className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="–ù–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å
                  </label>
                  <input
                    type="password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    className="w-full px-3 py-2 border border-slate-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                  />
                </div>
              </div>

              {passwordResetError && (
                <p className="text-red-600 text-sm">{passwordResetError}</p>
              )}

              <div className="flex gap-3">
                <button
                  onClick={handlePasswordReset}
                  className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
                >
                  –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                </button>
                <button
                  onClick={() => {
                    setShowPasswordReset(false);
                    setMasterKey("");
                    setNewPassword("");
                    setConfirmPassword("");
                    setPasswordResetError("");
                  }}
                  className="flex-1 bg-slate-300 text-slate-700 py-2 px-4 rounded-md hover:bg-slate-400 transition-colors"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          ) : (
            <LoginForm
              password={password}
              setPassword={setPassword}
              loginError={loginError}
              onLogin={handleLogin}
              onForgotPassword={() => setShowPasswordReset(true)}
              isBlocked={isBlocked}
              blockTime={blockTime}
            />
          )
        ) : !showAddForm && !showContactsEdit && !showCertificatesEdit ? (
          <>
            <AdminMenu
              contacts={contacts}
              onAddTestimonial={() => setShowAddForm(true)}
              onEditContacts={() => {
                setEditedContacts(contacts);
                setShowContactsEdit(true);
              }}
              onEditCertificates={() => {
                setEditedCertificates(certificates);
                setShowCertificatesEdit(true);
              }}
              onLogout={handleLogout}
            />
            <div className="mt-6 pt-6 border-t border-slate-200">
              <TestimonialList
                testimonials={testimonials}
                editingIndex={editingIndex}
                onEdit={(index) => setEditingIndex(index)}
                onSave={handleUpdateTestimonial}
                onCancel={() => setEditingIndex(null)}
                onDelete={handleDeleteTestimonial}
                onFieldChange={handleFieldChange}
                onMoveUp={handleMoveUp}
                onMoveDown={handleMoveDown}
              />
            </div>
          </>
        ) : showContactsEdit ? (
          <ContactsEditForm
            editedContacts={editedContacts}
            setEditedContacts={setEditedContacts}
            onSave={handleSaveContacts}
            onCancel={() => setShowContactsEdit(false)}
          />
        ) : showCertificatesEdit ? (
          <CertificatesEditForm
            editedCertificates={editedCertificates}
            setEditedCertificates={setEditedCertificates}
            onSave={handleSaveCertificates}
            onCancel={() => setShowCertificatesEdit(false)}
          />
        ) : (
          <TestimonialAddForm
            newTestimonial={newTestimonial}
            setNewTestimonial={setNewTestimonial}
            onPublish={handlePublishTestimonial}
            onCancel={() => setShowAddForm(false)}
          />
        )}
      </div>
    </div>
  );
};

export default AdminPanel;
